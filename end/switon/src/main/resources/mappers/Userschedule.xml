<?xml version="1.0" encoding="UTF-8"?>

<!-- mappers/Userschedule.xml -->
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="userschedule">

	<!-- 참여율 (스터디의 모든 스케쥴 중에서 내가 참가한 스케쥴의 퍼센티지) -->
	<select id="selectParticipationRate" parameterType="RateDTO" resultType="RateDTO">
		select count(*) as mine,
		(select count(*)
			from schedule
			where study_id = #{study_id}) as total
		from userschedule
		where user_id = #{user_id}
		and schedule_id in (select id
								from schedule
								where study_id = #{study_id});
	</select>

	<!-- 출석률 (스터디의 완료된 스케쥴 중에서 내가 참가한 동시에 success한 스케쥴의 퍼센티지) -->
	<select id="selectAttendanceRate" parameterType="RateDTO" resultType="RateDTO">
		select count(*) as mine,
		(select count(*)
			from schedule
			where study_id = #{study_id}
			and isFinish = true) as total
		from userschedule
		where user_id = #{user_id}
		and success = true
		and schedule_id in (select id
								from schedule
								where study_id = #{study_id});
	</select>


	<!-- 모든 유저스케줄 조회 -->
	<select id="selectAll" resultType="UserSchedule">
		select id, user_id, schedule_id, status, success
		from userschedule
	</select>
	
	<!-- 유저 아이디로 스케줄 조회 -->
	<select id="selectUserScheduleByUserId" resultType="UserSchedule">
		select id, user_id, schedule_id, status, success
		from userschedule
		where user_id = #{user_id}
	</select>
	
	<!-- 스케줄 아이디로 참석한 유저 정보 조회 -->
	<select id="selectUserSchedulesByScheduleId" resultType="UserSchedule">
		select id, user_id, schedule_id, status, success
		from userschedule
		where schedule_id = #{scheduleId}
	</select>
	
	<!-- 유저스케줄 생성 (* status는 자동으로 생성됨, 입력X) -->
	<insert id="insertUserSchedule" parameterType="UserSchedule">
		insert into `userschedule`(user_id, schedule_id)
		values (#{user_id}, #{schedule_id})
	</insert>
	
	<!-- 스케줄의 상태(status)를 변경 1: 입실 2: 퇴실 4: 시간지남-->
	<update id="updateCheckIn" parameterType="UserSchedule">
		update `userschedule`
		set status = #{status}
		where id = #{id}
	</update>
	
	<!-- 스케줄의 성공적으로 완료 여부(success)를 변경 1: 성공, 0: 실패-->
	<update id="updateSuccess" parameterType="UserSchedule">
		update `userschedule`
		set success = #{success}
		where id = #{id}
	</update>
	
	<!-- 스케줄의 상태와 성공여부 동시에 변경 -->
	<update id="updateSchedule" parameterType="UserSchedule">
		update `userschedule`
		set success = #{success},
			status = #{status}
		where id = #{id}
	</update>
	
	<!-- 스케줄 id로 그 스케줄의 참석 정보 모두 삭제 -->
	<delete id="deleteAllByScheduleId" parameterType="Integer">
		delete from `userschedule`
		where schedule_id = #{schedule_id}
	</delete>
	
	<!-- 스케줄 id + 유저 id로 참석 정보 삭제 -->
	<delete id="cancelParticipate" parameterType="UserSchedule">
		delete from `userschedule`
		where schedule_id = #{schedule_id}
		and user_id = #{user_id}
	</delete>
	
	<!-- 스케줄 id + 유저 id로 참석 정보 검색 -->
	<select id="selectParticipate" parameterType="UserSchedule" resultType="UserSchedule">
		select id, user_id, schedule_id, status, success
		from userschedule
		where user_id = #{user_id}
		and schedule_id = #{schedule_id}
	</select>
	
	<!-- id로 유저 스케줄 삭제 -->
	<delete id="deleteUserSchedule">
		delete from userschedule
		where id = #{id}
	</delete>
	
	<!-- 알림을 쏴줘야할 유저 정보 검색 -->
	<select id="selectUsersToAlarm" parameterType="TimeBetweenDTO" resultType="ScheduleAlarmReturnDTO">
		select `userschedule`.user_id as user_id, `schedule`.id as schedule_id, `schedule`.title as schedule_title
		from `userschedule`
		join `schedule` on `userschedule`.schedule_id = `schedule`.id
		where start <![CDATA[ > ]]> #{start}  and  start <![CDATA[ < ]]> #{end}
	</select>
	
	<!-- 퇴실 알림을 쏴줘야할 유저 정보 검색 -->
	<select id="selectUsersToAlarm2" parameterType="TimeBetweenDTO" resultType="ScheduleAlarmReturnDTO">
		select `userschedule`.user_id as user_id, `schedule`.id as schedule_id, `schedule`.title as schedule_title
		from `userschedule`
		join `schedule` on `userschedule`.schedule_id = `schedule`.id
		where end <![CDATA[ > ]]> #{start}  and  end <![CDATA[ < ]]> #{end}
	</select>
	
	<!-- 더이상의 수정, 삭제는 없음! -->

</mapper>